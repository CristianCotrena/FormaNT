Index: src/main/java/com/example/locationCar/services/clientServices/ClientService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/locationCar/services/clientServices/ClientService.java b/src/main/java/com/example/locationCar/services/clientServices/ClientService.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/com/example/locationCar/services/clientServices/ClientService.java	
@@ -0,0 +1,26 @@
+package com.example.locationCar.services.clientServices;
+
+import com.example.locationCar.models.ClientModel;
+import com.example.locationCar.repositories.ClientRepository;
+import org.springframework.stereotype.Service;
+
+import java.util.Optional;
+import java.util.UUID;
+
+@Service
+public class ClientService {
+    ClientRepository clientRepository;
+
+    public ClientService(ClientRepository clientRepository){
+        this.clientRepository = clientRepository ;
+    }
+
+    public Optional<ClientModel> getClient(UUID id) {
+        Optional<ClientModel> client = clientRepository.findById(id);
+        return client;
+    }
+
+    public void deleteClient(UUID id) {
+        clientRepository.deleteById(id);
+    }
+}
Index: src/test/java/com/example/locationCar/deleteTest/DeleteClientTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/com/example/locationCar/deleteTest/DeleteClientTest.java b/src/test/java/com/example/locationCar/deleteTest/DeleteClientTest.java
new file mode 100644
--- /dev/null	
+++ b/src/test/java/com/example/locationCar/deleteTest/DeleteClientTest.java	
@@ -0,0 +1,67 @@
+package com.example.locationCar.deleteTest;
+
+import com.example.locationCar.models.ClientModel;
+import com.example.locationCar.repositories.ClientRepository;
+import com.example.locationCar.services.clientServices.ClientService;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.extension.ExtendWith;
+import org.mockito.InjectMocks;
+import org.mockito.Mock;
+import org.mockito.junit.jupiter.MockitoExtension;
+
+import java.util.Optional;
+import java.util.UUID;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertNotNull;
+import static org.junit.jupiter.api.Assertions.assertFalse;
+import static org.mockito.Mockito.when;
+
+@ExtendWith(MockitoExtension.class)
+public class DeleteClientTest {
+    @InjectMocks
+    private ClientService clientService;
+
+    @Mock
+    private ClientRepository clientRepository;
+
+    private ClientModel clientModel;
+
+    @BeforeEach
+    void setUp() {
+        clientModel = new ClientModel();
+        clientModel.setIdClient(UUID.randomUUID());
+        clientModel.setName("Client");
+        clientModel.setCpfCnpj("12345678910");
+        clientModel.setCnh("1234567890");
+        clientModel.setTelephone("(51) 99988-1234");
+        clientModel.setEmail("teste@deleteclient.com.br");
+        clientModel.setAge(40);
+        clientModel.setEmergencyContact("(51) 99988-4321");
+        clientModel.setStatus(1);
+    }
+
+    @Test
+    public void testGetClientById() {
+        UUID id = clientModel.getIdClient();
+
+        when(clientRepository.findById(id)).thenReturn(Optional.of(clientModel));
+
+        Optional<ClientModel> result = clientService.getClient(id);
+
+        assertNotNull(result);
+        assertEquals(clientModel, result.get());
+    }
+
+    @Test
+    public void deleteClient() {
+
+        UUID clientId = clientModel.getIdClient();
+
+        clientRepository.deleteById(clientId);
+
+        assertFalse(clientRepository.existsById(clientId));
+    }
+
+}
\ No newline at end of file
Index: src/main/java/com/example/locationCar/model/VehicleModel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/locationCar/model/VehicleModel.java b/src/main/java/com/example/locationCar/model/VehicleModel.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/com/example/locationCar/model/VehicleModel.java	
@@ -0,0 +1,123 @@
+package com.example.locationCar.model;
+
+import jakarta.persistence.*;
+
+import java.io.Serializable;
+import java.math.BigDecimal;
+import java.util.UUID;
+
+@Entity
+@Table(name = "TB_VEHICLE")
+public class VehicleModel implements Serializable {
+    private static final long serialVersionUID = 1L;
+    @Id
+    @GeneratedValue(strategy = GenerationType.AUTO)
+    private UUID idVehicle;
+
+    private String license;
+
+    private String brand;
+
+    private String model;
+
+    private int doorNumber; // 2 ou 4
+
+    private String color;
+    private String fuel;
+
+    private BigDecimal dailyValue;
+
+    private BigDecimal mileage;
+
+    private int status;
+
+    private BigDecimal rating;
+
+    public UUID getIdVehicle() {
+        return idVehicle;
+    }
+
+    public void setIdVehicle(UUID idVehicle) {
+        this.idVehicle = idVehicle;
+    }
+
+    public String getLicense() {
+        return license;
+    }
+
+    public void setLicense(String license) {
+        this.license = license;
+    }
+
+    public String getBrand() {
+        return brand;
+    }
+
+    public void setBrand(String brand) {
+        this.brand = brand;
+    }
+
+    public String getModel() {
+        return model;
+    }
+
+    public void setModel(String model) {
+        this.model = model;
+    }
+
+    public int getDoorNumber() {
+        return doorNumber;
+    }
+
+    public void setDoorNumber(int doorNumber) {
+        this.doorNumber = doorNumber;
+    }
+
+    public String getColor() {
+        return color;
+    }
+
+    public void setColor(String color) {
+        this.color = color;
+    }
+
+    public String getFuel() {
+        return fuel;
+    }
+
+    public void setFuel(String fuel) {
+        this.fuel = fuel;
+    }
+
+    public BigDecimal getDailyValue() {
+        return dailyValue;
+    }
+
+    public void setDailyValue(BigDecimal dailyValue) {
+        this.dailyValue = dailyValue;
+    }
+
+    public BigDecimal getMileage() {
+        return mileage;
+    }
+
+    public void setMileage(BigDecimal mileage) {
+        this.mileage = mileage;
+    }
+
+    public int getStatus() {
+        return status;
+    }
+
+    public void setStatus(int status) {
+        this.status = status;
+    }
+
+    public BigDecimal getRating() {
+        return rating;
+    }
+
+    public void setRating(BigDecimal rating) {
+        this.rating = rating;
+    }
+}
Index: src/main/java/com/example/locationCar/repositories/VeiculoRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/locationCar/repositories/VeiculoRepository.java b/src/main/java/com/example/locationCar/repositories/VeiculoRepository.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/com/example/locationCar/repositories/VeiculoRepository.java	
@@ -0,0 +1,12 @@
+package com.example.locationCar.repositories;
+
+import com.example.locationCar.model.VehicleModel;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.stereotype.Repository;
+
+import java.util.UUID;
+
+@Repository
+public interface VeiculoRepository extends JpaRepository<VehicleModel, UUID> {
+
+}
