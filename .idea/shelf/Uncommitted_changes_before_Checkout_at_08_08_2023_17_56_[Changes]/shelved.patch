Index: src/main/resources/application.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\r\nspring.datasource.url= jdbc:postgresql://localhost:5432/postgres\r\nspring.datasource.username=postgres\r\nspring.datasource.password=password\r\nspring.jpa.hibernate.ddl-auto=update\r\n\r\nspring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/src/main/resources/application.properties b/src/main/resources/application.properties
--- a/src/main/resources/application.properties	(revision f3a779f062a75f22c38cc86e8cb6fdb3979e2d70)
+++ b/src/main/resources/application.properties	(date 1691526821824)
@@ -1,5 +1,5 @@
 
-spring.datasource.url= jdbc:postgresql://localhost:5432/postgres
+spring.datasource.url= jdbc:postgresql://localhost:5433/carrental
 spring.datasource.username=postgres
 spring.datasource.password=password
 spring.jpa.hibernate.ddl-auto=update
Index: src/main/java/com/example/locationCar/repositories/ClientRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.locationCar.repositories;\r\n\r\nimport com.example.locationCar.models.ClientModel;\r\nimport org.springframework.data.jpa.repository.JpaRepository;\r\nimport org.springframework.stereotype.Repository;\r\n\r\nimport java.util.UUID;\r\n\r\n@Repository\r\npublic interface ClientRepository extends JpaRepository<ClientModel, UUID> {\r\n    ClientModel findByCpfCnpj(String cpfCnpj);\r\n    ClientModel findByEmail(String email);\r\n    ClientModel findByEmailAndCpfCnpj(String email, String cpfCnpj);\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/locationCar/repositories/ClientRepository.java b/src/main/java/com/example/locationCar/repositories/ClientRepository.java
--- a/src/main/java/com/example/locationCar/repositories/ClientRepository.java	(revision f3a779f062a75f22c38cc86e8cb6fdb3979e2d70)
+++ b/src/main/java/com/example/locationCar/repositories/ClientRepository.java	(date 1691526883388)
@@ -1,7 +1,10 @@
 package com.example.locationCar.repositories;
 
 import com.example.locationCar.models.ClientModel;
+import org.springframework.data.domain.Page;
+import org.springframework.data.domain.PageRequest;
 import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Query;
 import org.springframework.stereotype.Repository;
 
 import java.util.UUID;
@@ -9,7 +12,11 @@
 @Repository
 public interface ClientRepository extends JpaRepository<ClientModel, UUID> {
     ClientModel findByCpfCnpj(String cpfCnpj);
+
     ClientModel findByEmail(String email);
+
     ClientModel findByEmailAndCpfCnpj(String email, String cpfCnpj);
 
+    @Query("SELECT c FROM ClientModel c WHERE (:age IS NULL OR c.age >= :age)")
+    Page<ClientModel> listByAgeGreaterThan(Integer age, PageRequest pageRequest);
 }
Index: src/main/java/com/example/locationCar/controllers/ClientController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.locationCar.controllers;\r\n\r\nimport com.example.locationCar.models.ClientModel;\r\nimport com.example.locationCar.services.clientService.CreateClientService;\r\nimport io.swagger.v3.oas.annotations.Operation;\r\nimport io.swagger.v3.oas.annotations.media.Content;\r\nimport io.swagger.v3.oas.annotations.media.Schema;\r\nimport io.swagger.v3.oas.annotations.responses.ApiResponse;\r\nimport io.swagger.v3.oas.annotations.tags.Tag;\r\nimport org.springframework.http.HttpStatus;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.web.bind.annotation.*;\r\nimport java.util.UUID;\r\n\r\n@RestController\r\n@RequestMapping(\"v1/client\")\r\n@Tag(name = \"Client\", description = \"Operations about client\")\r\npublic class ClientController {\r\n\r\n   private final CreateClientService createClientService;\r\n\r\n    public ClientController(CreateClientService createClientService) {\r\n        this.createClientService = createClientService;\r\n    }\r\n\r\n    @Operation(summary = \"Create client\", description = \"Add a client to database\")\r\n    @ApiResponse(responseCode = \"201\", description = \"Created\", content = {\r\n            @Content(mediaType = \"text/plain\", schema = @Schema(type = \"string\", format = \"uuid\"))\r\n    })\r\n    @ApiResponse(responseCode = \"400\", description = \"Invalid data\", content = {\r\n            @Content(mediaType = \"text/plain\", schema = @Schema(type = \"string\", example = \"E-mail já cadastrado para outro cliente\")),\r\n            @Content(mediaType = \"text/plain\", schema = @Schema(type = \"string\", example = \"CPF/CNPJ já cadastrado para outro cliente\")),\r\n            @Content(mediaType = \"text/plain\", schema = @Schema(type = \"string\", example = \"CPF inválido\"))\r\n    })\r\n    @PostMapping\r\n    public ResponseEntity<String> createClient(@RequestBody ClientModel clientModel) {\r\n        try {\r\n            UUID newClientId = createClientService.createClient(clientModel);\r\n            return new ResponseEntity<>(newClientId.toString(), HttpStatus.CREATED);\r\n        } catch (IllegalArgumentException e) {\r\n            return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/locationCar/controllers/ClientController.java b/src/main/java/com/example/locationCar/controllers/ClientController.java
--- a/src/main/java/com/example/locationCar/controllers/ClientController.java	(revision f3a779f062a75f22c38cc86e8cb6fdb3979e2d70)
+++ b/src/main/java/com/example/locationCar/controllers/ClientController.java	(date 1691527123211)
@@ -2,14 +2,17 @@
 
 import com.example.locationCar.models.ClientModel;
 import com.example.locationCar.services.clientService.CreateClientService;
+import com.example.locationCar.services.clientService.ListClientService;
 import io.swagger.v3.oas.annotations.Operation;
 import io.swagger.v3.oas.annotations.media.Content;
 import io.swagger.v3.oas.annotations.media.Schema;
 import io.swagger.v3.oas.annotations.responses.ApiResponse;
 import io.swagger.v3.oas.annotations.tags.Tag;
+import org.springframework.data.domain.Page;
 import org.springframework.http.HttpStatus;
 import org.springframework.http.ResponseEntity;
 import org.springframework.web.bind.annotation.*;
+
 import java.util.UUID;
 
 @RestController
@@ -17,9 +20,11 @@
 @Tag(name = "Client", description = "Operations about client")
 public class ClientController {
 
-   private final CreateClientService createClientService;
+    private final CreateClientService createClientService;
+    private final ListClientService listClientService;
 
-    public ClientController(CreateClientService createClientService) {
+    public ClientController(CreateClientService createClientService, ListClientService listClientService) {
+        this.listClientService = listClientService;
         this.createClientService = createClientService;
     }
 
@@ -41,4 +46,28 @@
             return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
         }
     }
+
+    @Operation(summary = "List clients", description = "List clients")
+    @ApiResponse(responseCode = "200", description = "Found", content = {
+            @Content(mediaType = "application/json", schema = @Schema(implementation = ClientModel.class))
+    })
+    @ApiResponse(responseCode = "404", description = "Invalid data", content = {
+            @Content(mediaType = "text/plain", schema = @Schema(type = "string", example = "Clientes não encontrados.")),
+    })
+    @ApiResponse(responseCode = "400", description = "Invalid data", content = {
+            @Content(mediaType = "text/plain", schema = @Schema(type = "string", example = "Idade informada precisa ser maior ou igual a 18.")),
+    })
+    @GetMapping
+    public ResponseEntity<Object> listClients(@RequestParam(required = false) Integer age,
+                                              @RequestParam(required = false) Integer page) {
+        try {
+            Page<ClientModel> clients = listClientService.listClients(age, page);
+
+            if(clients.isEmpty()) return new ResponseEntity<>("Clientes não encontrados.", HttpStatus.NOT_FOUND);
+
+            return new ResponseEntity<>(clients, HttpStatus.OK);
+        } catch (IllegalArgumentException e) {
+            return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
+        }
+    }
 }
Index: src/main/java/com/example/locationCar/models/ClientModel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.locationCar.models;\r\n\r\nimport io.swagger.v3.oas.annotations.media.Schema;\r\nimport jakarta.persistence.*;\r\n\r\nimport java.io.Serializable;\r\nimport java.util.UUID;\r\n\r\n@Entity\r\n@Table(name = \"TB_CLIENTS\")\r\npublic class ClientModel implements Serializable {\r\n    private static final long serialVersionUID = 1L;\r\n\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.AUTO)\r\n    @Schema(hidden = true)\r\n    private UUID idClient;\r\n\r\n    @Schema(example = \"Carlitos Tevez\")\r\n    private String name;\r\n\r\n    @Schema(example = \"435.763.342-22\")\r\n    private String cpfCnpj;\r\n\r\n    @Schema(example = \"874658935467\")\r\n    private String cnh;\r\n\r\n    @Schema(example = \"23\")\r\n    private int age;\r\n\r\n    @Schema(example = \"11999999999\")\r\n    private String telephone;\r\n\r\n    @Schema(example = \"11999999998\")\r\n    private String emergencyContact;\r\n\r\n    @Schema(example = \"carlitosboca@gmail.com\")\r\n    private String email;\r\n\r\n    @Schema(hidden = true)\r\n    private int status = 1;\r\n\r\n\r\n    public UUID getIdClient() {\r\n        return idClient;\r\n    }\r\n\r\n    public void setIdClient(UUID idClient) {\r\n        this.idClient = idClient;\r\n    }\r\n\r\n    public String getName() {\r\n        return name;\r\n    }\r\n\r\n    public void setName(String name) {\r\n        this.name = name;\r\n    }\r\n\r\n    public String getCpfCnpj() {\r\n        return cpfCnpj;\r\n    }\r\n\r\n    public void setCpfCnpj(String cpfCnpj) {\r\n        this.cpfCnpj = cpfCnpj;\r\n    }\r\n\r\n    public String getCnh() {\r\n        return cnh;\r\n    }\r\n\r\n    public void setCnh(String cnh) {\r\n        this.cnh = cnh;\r\n    }\r\n\r\n    public int getAge() {\r\n        return age;\r\n    }\r\n\r\n    public void setAge(int age) {\r\n        this.age = age;\r\n    }\r\n\r\n    public String getTelephone() {\r\n        return telephone;\r\n    }\r\n\r\n    public void setTelephone(String telephone) {\r\n        this.telephone = telephone;\r\n    }\r\n\r\n    public String getEmergencyContact() {\r\n        return emergencyContact;\r\n    }\r\n\r\n    public void setEmergencyContact(String emergencyContact) {\r\n        this.emergencyContact = emergencyContact;\r\n    }\r\n\r\n    public String getEmail() {\r\n        return email;\r\n    }\r\n\r\n    public void setEmail(String email) {\r\n        this.email = email;\r\n    }\r\n\r\n    public int getStatus() {\r\n        return status;\r\n    }\r\n\r\n    public void setStatus(int status) {\r\n        this.status = status;\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/locationCar/models/ClientModel.java b/src/main/java/com/example/locationCar/models/ClientModel.java
--- a/src/main/java/com/example/locationCar/models/ClientModel.java	(revision f3a779f062a75f22c38cc86e8cb6fdb3979e2d70)
+++ b/src/main/java/com/example/locationCar/models/ClientModel.java	(date 1691527594569)
@@ -41,6 +41,7 @@
     private int status = 1;
 
 
+
     public UUID getIdClient() {
         return idClient;
     }
