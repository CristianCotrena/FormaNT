Index: src/main/java/com/example/locationCar/controllers/ClientController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.locationCar.controllers;\r\n\r\nimport com.example.locationCar.models.ClientModel;\r\nimport com.example.locationCar.services.clientService.CreateClientService;\r\nimport com.example.locationCar.services.clientService.ListClientService;\r\nimport io.swagger.v3.oas.annotations.Operation;\r\nimport io.swagger.v3.oas.annotations.media.Content;\r\nimport io.swagger.v3.oas.annotations.media.Schema;\r\nimport io.swagger.v3.oas.annotations.responses.ApiResponse;\r\nimport io.swagger.v3.oas.annotations.tags.Tag;\r\nimport org.springframework.data.domain.Page;\r\nimport org.springframework.http.HttpStatus;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.web.bind.annotation.*;\r\n\r\nimport java.util.UUID;\r\n\r\n@RestController\r\n@RequestMapping(\"v1/client\")\r\n@Tag(name = \"Client\", description = \"Operations about client\")\r\npublic class ClientController {\r\n\r\n    private final CreateClientService createClientService;\r\n    private final ListClientService listClientService;\r\n\r\n    public ClientController(CreateClientService createClientService, ListClientService listClientService) {\r\n        this.listClientService = listClientService;\r\n        this.createClientService = createClientService;\r\n    }\r\n\r\n    @Operation(summary = \"Create client\", description = \"Add a client to database\")\r\n    @ApiResponse(responseCode = \"201\", description = \"Created\", content = {\r\n            @Content(mediaType = \"text/plain\", schema = @Schema(type = \"string\", format = \"uuid\"))\r\n    })\r\n    @ApiResponse(responseCode = \"400\", description = \"Invalid data\", content = {\r\n            @Content(mediaType = \"text/plain\", schema = @Schema(type = \"string\", example = \"E-mail já cadastrado para outro cliente\")),\r\n            @Content(mediaType = \"text/plain\", schema = @Schema(type = \"string\", example = \"CPF/CNPJ já cadastrado para outro cliente\")),\r\n            @Content(mediaType = \"text/plain\", schema = @Schema(type = \"string\", example = \"CPF inválido\"))\r\n    })\r\n    @PostMapping\r\n    public ResponseEntity<String> createClient(@RequestBody ClientModel clientModel) {\r\n        try {\r\n            UUID newClientId = createClientService.createClient(clientModel);\r\n            return new ResponseEntity<>(newClientId.toString(), HttpStatus.CREATED);\r\n        } catch (IllegalArgumentException e) {\r\n            return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);\r\n        }\r\n    }\r\n\r\n    @Operation(summary = \"List clients\", description = \"List clients\")\r\n    @ApiResponse(responseCode = \"200\", description = \"Found\", content = {\r\n            @Content(mediaType = \"application/json\", schema = @Schema(implementation = ClientModel.class))\r\n    })\r\n    @ApiResponse(responseCode = \"404\", description = \"Invalid data\", content = {\r\n            @Content(mediaType = \"text/plain\", schema = @Schema(type = \"string\", example = \"Clientes não encontrados.\")),\r\n    })\r\n    @ApiResponse(responseCode = \"400\", description = \"Invalid data\", content = {\r\n            @Content(mediaType = \"text/plain\", schema = @Schema(type = \"string\", example = \"Idade informada precisa ser maior ou igual a 18.\")),\r\n    })\r\n    @GetMapping\r\n    public ResponseEntity<Object> listClients(@RequestParam(required = false) Integer age,\r\n                                              @RequestParam(required = false) Integer page) {\r\n        try {\r\n            Page<ClientModel> clients = listClientService.listClients(age, page);\r\n\r\n            if(clients.isEmpty()) return new ResponseEntity<>(\"Clientes não encontrados.\", HttpStatus.NOT_FOUND);\r\n\r\n            return new ResponseEntity<>(clients, HttpStatus.OK);\r\n        } catch (IllegalArgumentException e) {\r\n            return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/locationCar/controllers/ClientController.java b/src/main/java/com/example/locationCar/controllers/ClientController.java
--- a/src/main/java/com/example/locationCar/controllers/ClientController.java	
+++ b/src/main/java/com/example/locationCar/controllers/ClientController.java	
@@ -15,17 +15,22 @@
 
 import java.util.UUID;
 
+import com.example.locationCar.services.clientServices.ClientService;
+
+import java.util.Optional;
+
 @RestController
 @RequestMapping("v1/client")
 @Tag(name = "Client", description = "Operations about client")
 public class ClientController {
-
+    private final ClientService clientService;
     private final CreateClientService createClientService;
     private final ListClientService listClientService;
 
-    public ClientController(CreateClientService createClientService, ListClientService listClientService) {
-        this.listClientService = listClientService;
+    public ClientController(ClientService clientService, CreateClientService createClientService, ListClientService listClientService) {
+        this.clientService = clientService;
         this.createClientService = createClientService;
+        this.listClientService = listClientService;
     }
 
     @Operation(summary = "Create client", description = "Add a client to database")
@@ -70,4 +75,21 @@
             return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
         }
     }
+
+    @Operation(summary = "Delete Client", description = "Delete an client to database")
+    @ApiResponse(responseCode = "404", description = "Client not found", content = {
+            @Content(mediaType = "text/plain", schema = @Schema(type = "string", example = "Client not found")),
+    })
+    @ApiResponse(responseCode = "200", description = "OK", content = {
+            @Content(mediaType = "text/plain", schema = @Schema(type = "string", example = "Client deleted successfully"))
+    })
+    @DeleteMapping("/{id}")
+    public ResponseEntity<Object> deleteClient(@PathVariable(value = "id") UUID id) {
+        Optional<ClientModel> client = clientService.getClient(id);
+        if (client.isEmpty()) {
+            return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Client not found.");
+        }
+        clientService.deleteClient(id);
+        return ResponseEntity.status(HttpStatus.OK).body("Client deleted successfully.");
+    }
 }
Index: pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n\t\t xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n\t<modelVersion>4.0.0</modelVersion>\r\n\t<parent>\r\n\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t<artifactId>spring-boot-starter-parent</artifactId>\r\n\t\t<version>3.1.2</version>\r\n\t\t<relativePath/> <!-- lookup parent from repository -->\r\n\t</parent>\r\n\t<groupId>com.example</groupId>\r\n\t<artifactId>locationCar</artifactId>\r\n\t<version>0.0.1-SNAPSHOT</version>\r\n\t<name>locationCar</name>\r\n\t<description>Demo project for Spring Boot</description>\r\n\t<properties>\r\n\t\t<java.version>17</java.version>\r\n\t</properties>\r\n\t<dependencies>\r\n    \r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t<artifactId>spring-boot-starter-data-jpa</artifactId>\r\n\t\t</dependency>\r\n    \r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t<artifactId>spring-boot-starter-validation</artifactId>\r\n\t\t</dependency>\r\n    \r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t<artifactId>spring-boot-starter-web</artifactId>\r\n\t\t</dependency>\r\n    \r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springdoc</groupId>\r\n\t\t\t<artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>\r\n\t\t\t<version>2.1.0</version>\r\n\t\t</dependency>\r\n    \r\n        <dependency>\r\n            <groupId>org.mindrot</groupId>\r\n            <artifactId>jbcrypt</artifactId>\r\n            <version>0.4</version>\r\n        </dependency>\r\n\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springdoc</groupId>\r\n\t\t\t<artifactId>springdoc-openapi-ui</artifactId>\r\n\t\t\t<version>1.7.0</version>\r\n\t\t</dependency>\r\n\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.mindrot</groupId>\r\n\t\t\t<artifactId>jbcrypt</artifactId>\r\n\t\t\t<version>0.4</version>\r\n\t\t</dependency>\r\n\r\n        <dependency>\r\n            <groupId>commons-validator</groupId>\r\n            <artifactId>commons-validator</artifactId>\r\n            <version>1.7</version>\r\n        </dependency>\r\n\r\n\r\n          <dependency>\r\n            <groupId>com.googlecode.libphonenumber</groupId>\r\n            <artifactId>libphonenumber</artifactId>\r\n            <version>8.12.35</version>\r\n        </dependency>\r\n\r\n         <dependency>\r\n            <groupId>org.postgresql</groupId>\r\n            <artifactId>postgresql</artifactId>\r\n            <scope>runtime</scope>\r\n        </dependency>\r\n    \r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-test</artifactId>\r\n            <scope>test</scope>\r\n        </dependency>\r\n\r\n        <dependency>\r\n            <groupId>org.jetbrains</groupId>\r\n            <artifactId>annotations</artifactId>\r\n            <version>RELEASE</version>\r\n            <scope>compile</scope>\r\n        </dependency>\r\n\r\n        <dependency>\r\n            <groupId>org.mockito</groupId>\r\n            <artifactId>mockito-core</artifactId>\r\n            <version>5.4.0</version>\r\n        </dependency>\r\n\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-test</artifactId>\r\n            <version>3.1.2</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.junit.jupiter</groupId>\r\n            <artifactId>junit-jupiter-api</artifactId>\r\n            <version>5.9.3</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.mockito</groupId>\r\n            <artifactId>mockito-junit-jupiter</artifactId>\r\n            <version>5.3.1</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework</groupId>\r\n            <artifactId>spring-test</artifactId>\r\n            <version>6.0.11</version>\r\n        </dependency>\r\n\r\n\r\n    </dependencies>\r\n\r\n    <build>\r\n        <plugins>\r\n            <plugin>\r\n                <groupId>org.springframework.boot</groupId>\r\n                <artifactId>spring-boot-maven-plugin</artifactId>\r\n            </plugin>\r\n        </plugins>\r\n    </build>\r\n\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pom.xml b/pom.xml
--- a/pom.xml	
+++ b/pom.xml	
@@ -63,7 +63,6 @@
             <version>1.7</version>
         </dependency>
 
-
           <dependency>
             <groupId>com.googlecode.libphonenumber</groupId>
             <artifactId>libphonenumber</artifactId>
@@ -117,6 +116,12 @@
         </dependency>
 
 
+        <dependency>
+            <groupId>io.swagger.core.v3</groupId>
+            <artifactId>swagger-annotations-jakarta</artifactId>
+            <version>2.2.9</version>
+        </dependency>
+
     </dependencies>
 
     <build>
Index: src/main/java/com/example/locationCar/utils/postmanFile/Cliente.postman_collection.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\r\n\t\"info\": {\r\n\t\t\"_postman_id\": \"5a6dffcb-f93d-43e8-a889-f1a61e842130\",\r\n\t\t\"name\": \"Cliente\",\r\n\t\t\"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\",\r\n\t\t\"_exporter_id\": \"28525027\"\r\n\t},\r\n\t\"item\": [\r\n\t\t{\r\n\t\t\t\"name\": \"CreateClient\",\r\n\t\t\t\"request\": {\r\n\t\t\t\t\"method\": \"POST\",\r\n\t\t\t\t\"header\": [],\r\n\t\t\t\t\"body\": {\r\n\t\t\t\t\t\"mode\": \"raw\",\r\n\t\t\t\t\t\"raw\": \"{\\r\\n    \\\"name\\\": \\\"Anna\\\",\\r\\n    \\\"cpfCnpj\\\": \\\"016.302.650-55\\\",\\r\\n    \\\"cnh\\\": \\\"jhhh\\\",\\r\\n    \\\"age\\\": 37,\\r\\n    \\\"telephone\\\": \\\"981220944\\\",\\r\\n    \\\"emergencyContact\\\": \\\"984873664\\\",\\r\\n    \\\"email\\\": \\\"anna.hermes@gmail.com\\\",\\r\\n    \\\"status\\\": 1\\r\\n}\",\r\n\t\t\t\t\t\"options\": {\r\n\t\t\t\t\t\t\"raw\": {\r\n\t\t\t\t\t\t\t\"language\": \"json\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\t\"url\": {\r\n\t\t\t\t\t\"raw\": \"localhost:8080/v1/client\",\r\n\t\t\t\t\t\"host\": [\r\n\t\t\t\t\t\t\"localhost\"\r\n\t\t\t\t\t],\r\n\t\t\t\t\t\"port\": \"8080\",\r\n\t\t\t\t\t\"path\": [\r\n\t\t\t\t\t\t\"v1\",\r\n\t\t\t\t\t\t\"client\"\r\n\t\t\t\t\t]\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t\"response\": []\r\n\t\t}\r\n\t]\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/locationCar/utils/postmanFile/Cliente.postman_collection.json b/src/main/java/com/example/locationCar/utils/postmanFile/Cliente.postman_collection.json
--- a/src/main/java/com/example/locationCar/utils/postmanFile/Cliente.postman_collection.json	
+++ b/src/main/java/com/example/locationCar/utils/postmanFile/Cliente.postman_collection.json	
@@ -1,9 +1,9 @@
 {
 	"info": {
-		"_postman_id": "5a6dffcb-f93d-43e8-a889-f1a61e842130",
+		"_postman_id": "f18e987d-54cd-4795-9aac-5700f1fceb6a",
 		"name": "Cliente",
 		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
-		"_exporter_id": "28525027"
+		"_exporter_id": "28894337"
 	},
 	"item": [
 		{
@@ -32,6 +32,27 @@
 					]
 				}
 			},
+			"response": []
+		},
+		{
+			"name": "DeleteClient",
+			"request": {
+				"method": "DELETE",
+				"header": [],
+				"url": {
+					"raw": "http://localhost:8080/v1/client/8dfa0850-5e31-401f-aa80-3d41a48b6169",
+					"protocol": "http",
+					"host": [
+						"localhost"
+					],
+					"port": "8080",
+					"path": [
+						"v1",
+						"client",
+						"8dfa0850-5e31-401f-aa80-3d41a48b6169"
+					]
+				}
+			},
 			"response": []
 		}
 	]
